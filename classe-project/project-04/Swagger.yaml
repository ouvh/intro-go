openapi: 3.0.0
info:
  title: BookStore Api
  description: API for managing books and sales of books 
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /authors:
    post:
      summary: Create a new author
      operationId: createAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorDAO'
      responses:
        '201':
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: Bad request. Invalid JSON or missing fields.

    get:
      summary: Get all authors
      operationId: getAllAuthors
      parameters:
        - in: query
          name: ID
          schema:
            type: integer
            example: 1
          description: Filter by author ID.
        - in: query
          name: FirstName
          schema:
            type: string
            example: "John"
          description: Filter by first name.
        - in: query
          name: LastName
          schema:
            type: string
            example: "Doe"
          description: Filter by last name.
        - in: query
          name: Bio
          schema:
            type: string
            example: "science fiction"
          description: Filter by bio (partial match supported).
      responses:
        '200':
          description: List of authors matching the filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '404':
          description: No authors found.

  /authors/{id}:
    get:
      summary: Get an author by ID
      operationId: getAuthorById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Author details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Author not found.

    put:
      summary: Update an existing author
      operationId: updateAuthor
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorDAO'
      responses:
        '200':
          description: Author updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: Bad request. Invalid JSON or missing fields.
        '404':
          description: Author not found.

    delete:
      summary: Delete an author
      operationId: deleteAuthor
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Author deleted successfully.
        '404':
          description: Author not found.
  
  /books:
    post:
      summary: Create a new book
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDAO'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request. Invalid JSON or missing fields.

    get:
      summary: Get all books
      operationId: getAllBooks
      parameters:
        - in: query
          name: ID
          schema:
            type: integer
            example: 1
          description: Filter by book ID.
        - in: query
          name: Title
          schema:
            type: string
            example: "Book Title"
          description: Filter by book title.
        - in: query
          name: AuthorID
          schema:
            type: integer
            example: 1
          description: Filter by author ID.
        - in: query
          name: AuthorFirstName
          schema:
            type: string
            example: "John"
          description: Filter by author's first name.
        - in: query
          name: AuthorLastName
          schema:
            type: string
            example: "Doe"
          description: Filter by author's last name.
        - in: query
          name: AuthorBio
          schema:
            type: string
            example: "Fiction writer"
          description: Filter by author's bio.
        - in: query
          name: PublishedAtFrom
          schema:
            type: string
            format: date
            example: "2023-01-01"
          description: Filter by books published after this date.
        - in: query
          name: PublishedAtTo
          schema:
            type: string
            format: date
            example: "2023-12-31"
          description: Filter by books published before this date.
        - in: query
          name: PriceFrom
          schema:
            type: number
            format: float
            example: 10.0
          description: Filter by books with price greater than or equal to this value.
        - in: query
          name: PriceTo
          schema:
            type: number
            format: float
            example: 100.0
          description: Filter by books with price less than or equal to this value.
        - in: query
          name: StockFrom
          schema:
            type: integer
            example: 5
          description: Filter by books with stock greater than or equal to this value.
        - in: query
          name: StockTo
          schema:
            type: integer
            example: 50
          description: Filter by books with stock less than or equal to this value.
      responses:
        '200':
          description: List of books matching the filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '404':
          description: No books found.

  /books/{id}:
    get:
      summary: Get a book by ID
      operationId: getBookById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Book details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found.

    put:
      summary: Update an existing book
      operationId: updateBook
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDAO'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request. Invalid JSON or missing fields.
        '404':
          description: Book not found.

    delete:
      summary: Delete a book
      operationId: deleteBook
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Book deleted successfully.
        '404':
          description: Book not found.
  
  /customers:
    post:
      summary: Create a new customer
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDAO'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Bad request. Invalid JSON or missing fields.

    get:
      summary: Get all customers
      operationId: getAllCustomers
      parameters:
        - in: query
          name: ID
          schema:
            type: integer
            example: 1
          description: Filter by customer ID.
        - in: query
          name: Name
          schema:
            type: string
            example: "John Doe"
          description: Filter by customer name.
        - in: query
          name: Email
          schema:
            type: string
            example: "johndoe@example.com"
          description: Filter by customer email.
        - in: query
          name: AdressStreet
          schema:
            type: string
            example: "123 Main St"
          description: Filter by customer address street.
        - in: query
          name: AdressCity
          schema:
            type: string
            example: "Springfield"
          description: Filter by customer address city.
        - in: query
          name: AdressState
          schema:
            type: string
            example: "Illinois"
          description: Filter by customer address state.
        - in: query
          name: AdressPostalCode
          schema:
            type: string
            example: "62704"
          description: Filter by customer address postal code.
        - in: query
          name: AdressCountry
          schema:
            type: string
            example: "USA"
          description: Filter by customer address country.
        - in: query
          name: CreatedAtFrom
          schema:
            type: string
            format: date
            example: "2023-01-01"
          description: Filter by customers created after this date.
        - in: query
          name: CreatedAtTo
          schema:
            type: string
            format: date
            example: "2023-12-31"
          description: Filter by customers created before this date.
      responses:
        '200':
          description: List of customers matching the filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '404':
          description: No customers found.

  /customers/{id}:
    get:
      summary: Get a customer by ID
      operationId: getCustomerById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found.

    put:
      summary: Update an existing customer
      operationId: updateCustomer
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDAO'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Bad request. Invalid JSON or missing fields.
        '404':
          description: Customer not found.

    delete:
      summary: Delete a customer
      operationId: deleteCustomer
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Customer deleted successfully.
        '404':
          description: Customer not found.
  
  /orders:
    post:
      summary: Create a new order
      requestBody:
        description: Order data to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customer_id:
                  type: integer
                  description: ID of the customer placing the order
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      book_id:
                        type: integer
                        description: ID of the book
                      quantity:
                        type: integer
                        description: Quantity of the book
                status:
                  type: string
                  description: Order status
              required:
                - customer_id
                - items
                - status
      responses:
        '201':
          description: Order created successfully
        '400':
          description: Invalid input

    get:
      summary: Get all orders
      parameters:
        - name: ID
          in: query
          description: Filter by order ID
          schema:
            type: integer
        - name: TotalPrice
          in: query
          description: Filter by total price
          schema:
            type: number
        - name: CreatedAtFrom
          in: query
          description: Filter by creation date (from)
          schema:
            type: string
            format: date-time
        - name: CreatedAtTo
          in: query
          description: Filter by creation date (to)
          schema:
            type: string
            format: date-time
        - name: Status
          in: query
          description: Filter by status
          schema:
            type: string
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Invalid query parameters

  /orders/{id}:
    get:
      summary: Get a specific order by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the order
          schema:
            type: integer
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

    delete:
      summary: Delete a specific order by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the order to delete
          schema:
            type: integer
      responses:
        '200':
          description: Order deleted successfully
        '404':
          description: Order not found
  
  /salesReports:
    get:
      summary: Retrieve sales reports
      description: Retrieve all sales reports or search with query parameters.
      parameters:
        - name: TimestampFrom
          in: query
          description: Filter by timestamp (from)
          schema:
            type: string
            format: date-time
        - name: TimestampTo
          in: query
          description: Filter by timestamp (to)
          schema:
            type: string
            format: date-time
        - name: TotalRevenueFrom
          in: query
          description: Filter by minimum total revenue
          schema:
            type: number
        - name: TotalTevenueTo
          in: query
          description: Filter by maximum total revenue
          schema:
            type: number
        - name: TotalOrdersFrom
          in: query
          description: Filter by minimum total orders
          schema:
            type: integer
        - name: TotalOrdersTo
          in: query
          description: Filter by maximum total orders
          schema:
            type: integer
      responses:
        '200':
          description: List of sales reports
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SalesReport'
        '400':
          description: Invalid query parameters



components:
  schemas:
    AuthorDAO:
      type: object
      properties:
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        bio:
          type: string
          example: "An author specializing in science fiction."
      required:
        - first_name
        - last_name
    
    Author:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        bio:
          type: string
          example: "An author specializing in science fiction."
      required:
        - id
        - first_name
        - last_name
    
    BookDAO:
      type: object
      properties:
        title:
          type: string
          example: "A Great Book"
        author_id:
          type: integer
          example: 1
        genres:
          type: array
          items:
            type: string
          example: ["Fiction", "Adventure"]
        price:
          type: number
          format: float
          example: 19.99
        stock:
          type: integer
          example: 100
      required:
        - title
        - author_id
        - genres
        - price
        - stock

    Book:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "A Great Book"
        author:
          $ref: '#/components/schemas/Author'
        genres:
          type: array
          items:
            type: string
          example: ["Fiction", "Adventure"]
        published_at:
          type: string
          format: date
          example: "2023-05-15"
        price:
          type: number
          format: float
          example: 19.99
        stock:
          type: integer
          example: 100
      required:
        - id
        - title
        - author
    
    AddressDAO:
      type: object
      properties:
        street:
          type: string
          example: "123 Main St"
        city:
          type: string
          example: "Springfield"
        state:
          type: string
          example: "Illinois"
        postal_code:
          type: string
          example: "62704"
        country:
          type: string
          example: "USA"
      required:
        - street
        - city
        - state
        - postal_code
        - country

    CustomerDAO:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "johndoe@example.com"
        address:
          $ref: '#/components/schemas/AddressDAO'
      required:
        - name
        - email
        - address

    Address:
      type: object
      properties:
        street:
          type: string
          example: "123 Main St"
        city:
          type: string
          example: "Springfield"
        state:
          type: string
          example: "Illinois"
        postal_code:
          type: string
          example: "62704"
        country:
          type: string
          example: "USA"

    Customer:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "johndoe@example.com"
        address:
          $ref: '#/components/schemas/Address'
        created_at:
          type: string
          format: date
          example: "2023-05-15"
      required:
        - id
        - name
        - email
        - address
        - created_at
    
    Order:
      type: object
      properties:
        id:
          type: integer
        customer:
          $ref: '#/components/schemas/Customer'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        total_price:
          type: number
        created_at:
          type: string
          format: date-time
        status:
          type: string
  
    OrderItem:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/Book'
        quantity:
          type: integer
  
  
    SalesReport:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        total_revenue:
          type: number
        total_orders:
          type: integer
        top_selling_books:
          type: array
          items:
            $ref: '#/components/schemas/BookSales'
    
    
    BookSales:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/Book'
        quantity_sold:
          type: integer